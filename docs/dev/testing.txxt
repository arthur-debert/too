                Testing Guide

This project uses test-driven development with a focus on clear, fast,
and reliable tests.


1. Test Types

    Unit Tests (Preferred):
    
        Test business logic without filesystem access. Fast and reliable.
        
        • Always use testutil package for in-memory stores
        • No manual store creation or cleanup needed
        • Test the pkg/too API, not CLI parsing

    Integration Tests:
    
        Only for testing the storage layer itself.
        
        • Use t.TempDir() for automatic cleanup
        • Minimize filesystem tests


2. Test Utilities

    The testutil package provides helpers for consistent test data:

    Store Creation:
    
        -- go
        // Create store with pending todos
        store := testutil.CreatePopulatedStore(t, "Task 1", "Task 2")
        
        // Create store with specific todo states
        specs := []testutil.TodoSpec{
            {Text: "Pending", Done: false},
            {Text: "Done", Done: true},
        }
        store := testutil.CreateStoreWithSpecs(t, specs)
        --

    Assertions:
    
        • AssertTodoInList(t, todos, "Expected text")
        • AssertTodoNotInList(t, todos, "Unexpected text")
        • AssertTodoCount(t, result, total, doneCount)
        • AssertTodoHasStatus(t, todo, models.StatusDone)

    See pkg/too/testutil for the complete API.


3. Test Pattern

    Follow the Arrange-Act-Assert pattern:

    -- go
    func TestCleanCommand(t *testing.T) {
        // ARRANGE: Set up test data
        store := testutil.CreateStoreWithSpecs(t, []testutil.TodoSpec{
            {Text: "Keep me", Done: false},
            {Text: "Remove me", Done: true},
        })
        
        // ACT: Execute the code under test
        result, err := too.Clean(CleanOptions{
            CollectionPath: store.Path(),
        })
        require.NoError(t, err)
        
        // ASSERT: Verify results
        assert.Equal(t, 1, result.RemovedCount)
        testutil.AssertTodoNotInList(t, result.Todos, "Remove me")
    }
    --


4. Integration Testing Environment

    For manual integration testing, use scripts/run-integration-env.sh:
    
    Purpose:
    
        • Test too commands without affecting your real todo data
        • Verify behavior with different .todos file states
        • Debug issues in an isolated environment
    
    Usage:
    
        -- bash
        # Start with empty .todos file
        ./scripts/run-integration-env.sh
        
        # Copy your current todos for testing
        ./scripts/run-integration-env.sh ~/.todos.json
        
        # Use test fixtures
        ./scripts/run-integration-env.sh test/fixtures/complex.todos
        --
    
    The script:
    
        • Creates a temporary directory in PROJECT_ROOT/tmp/
        • Initializes or copies a .todos file
        • Drops you into a shell with custom "[too-test]" prompt
        • Adds too to PATH for easy testing
        • Automatically cleans up when you exit
    
    Example Session:
    
        -- bash
        $ ./scripts/run-integration-env.sh
        Initializing fresh .todos file
        Initialized empty too collection in .todos
        
        === Test Environment Ready ===
        Working directory: /path/to/too/tmp/too-test-ABC123
        Using too binary: /path/to/too/bin/too
        Data file: /path/to/too/tmp/too-test-ABC123/.todos
        
        Type 'exit' or press Ctrl+D to leave and cleanup
        
        [too-test] ~/too/tmp/too-test-ABC123 $ too add "Test todo"
        1 | ✕ Test todo
        [too-test] ~/too/tmp/too-test-ABC123 $ exit
        
        Cleaning up test environment...
        Test environment cleaned up
        --


5. Best Practices

    DO:
    
        • Use testutil helpers for all todo creation
        • Test error codes, not error messages
        • Keep tests focused on single behavior
        • Use table-driven tests for similar scenarios

    DON'T:
    
        • Manually create stores or todos
        • Write complex verification loops
        • Test CLI parsing in unit tests
        • Touch the filesystem unless testing storage
