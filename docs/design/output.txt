                Output and Rendering System

This document describes how too renders todo items for display, including
the visual formatting, status indicators, and hierarchical presentation
used across different output contexts.


1. Core Rendering Philosophy

    too's output system is designed around clarity and consistency. The same
    todo item should be recognizable across different views and commands,
    while providing context-appropriate information density.

    Key principles:

        - Visual Consistency: Same items look the same across commands
        - Status at a Glance: Quick visual indicators for completion state  
        - Hierarchical Clarity: Clear indentation and numbering for nested items
        - Context Awareness: Different detail levels for different use cases


2. Status Symbol System

    too uses Unicode symbols to indicate the completion status of todos:

        ○ (U+25CB): Pending/scheduled todos - clean, hollow circle
        ● (U+25CF): Completed todos - filled circle  
        ◐ (U+25D0): Mixed state parents - half-filled circle
        ⊘ (U+2298): Deleted todos - circled diagonal slash

    2.1 Status Symbol Logic

        Individual Items:
            - Pending todos show ○ 
            - Completed todos show ●
            - Deleted todos show ⊘

        Parent Items (with children):
            - If all children are completed: ●
            - If no children are completed: ○  
            - If some children are completed: ◐ (mixed state)

        This provides immediate visual feedback about project completion
        status without requiring detailed inspection of children.

    2.2 Benefits of Unicode Symbols

        - Universal display support across terminals
        - Clear visual hierarchy compared to text indicators  
        - Compact representation saves horizontal space
        - Visually distinct from content text


3. Position Path Display

    Position paths are displayed according to their nanostore-calculated values:

    3.1 Standard Numbering

        Root level items:
            1. First todo
            2. Second todo
            3. Third todo

        Nested items:
            1. Project
              1.1. Subtask one
              1.2. Subtask two
                1.2.1. Sub-subtask

    3.2 Completed Item Numbering

        In --all view, completed items show with 'c' namespace:
            1. Active todo
            1.c1. First completed under 1
            1.c2. Second completed under 1
            2. Another active todo


4. Rendering Contexts

    4.1 List View (Default)

        Standard format with status symbols:
            ○ 1. Buy groceries
            ○ 2. Write report
              ○ 2.1. Research
              ● 2.2. First draft
            ● 3. Call client

    4.2 Compact View

        No status symbols, just numbering and text:
            1. Buy groceries
            2. Write report
            3. Call client

    4.3 Detailed View

        Includes metadata like modification times:
            ○ 1. Buy groceries [modified: 2h ago]
            ○ 2. Write report [modified: 1d ago]

    4.4 Search Results

        Highlights matching terms and shows context:
            Found 2 matches for "report":
            ○ 2. Write report
            ○ 5. Send report to manager


5. Hierarchical Rendering

    5.1 Indentation Rules

        - Each level indented by 2 spaces
        - Position path aligned with parent's text
        - Consistent spacing regardless of path length

    5.2 Collapsed/Expanded States

        Future enhancement for deep hierarchies:
            ○ 1. Project Alpha [+3 hidden]
            ○ 2. Project Beta
              ○ 2.1. Phase 1
              ○ 2.2. Phase 2


6. Output Formats

    6.1 Terminal (Default)

        - ANSI colors for emphasis
        - Unicode symbols for status
        - Intelligent width detection

    6.2 Plain Text

        - No ANSI codes
        - ASCII alternatives for symbols
        - Fixed width formatting

    6.3 JSON

        - Structured data output
        - All metadata included
        - Machine-readable format

    6.4 Markdown

        - GitHub-flavored markdown
        - Checkboxes for status
        - Nested lists for hierarchy


7. Implementation Architecture

    7.1 Renderer Interface

        All renderers implement consistent interface:
            - RenderList(todos)
            - RenderChange(result)
            - RenderError(error)

    7.2 Hierarchical Processing

        Build hierarchical structure from flat list:
            - Group by parent relationships
            - Calculate effective status
            - Apply consistent formatting

    7.3 Format Selection

        Based on --format flag or terminal detection:
            - Auto-detect terminal capabilities
            - Fallback to plain text
            - Override with explicit format


8. Special Cases

    8.1 Empty States

        Friendly messages for empty lists:
            "No todos yet. Use 'too add' to create one."
            "All done! No active todos."

    8.2 Long Text

        Intelligent wrapping for long todo text:
            ○ 1. Very long todo text that needs to wrap
                 to multiple lines while maintaining the
                 proper indentation

    8.3 Special Characters

        Proper escaping for terminal safety:
            - Control characters filtered
            - Unicode normalization
            - Shell-safe output


Summary:

    The output system provides clear, consistent rendering across all
    contexts while leveraging nanostore's position path calculations.
    Visual indicators and thoughtful formatting make it easy to understand
    todo status and relationships at a glance.