                ID AND REFERENCING SYSTEM

    This document describes the identifier system used in too and the core
    philosophy behind how users interact with todo items.


1. The Core Problem: A Clean List vs. Stable References

    The primary goal of too is to be a fast, convenient CLI tool. A key part
    of this experience is how users refer to items. Users naturally think of
    lists as clean, sequential numbers starting from 1. An item's position
    should be easy to see and type.

    This creates a conflict:

        - User's Mental Model: A clean list (1, 2, 3...) of active tasks.
        - Application's Need: A stable, unchanging reference to an item,
          regardless of its status (done, pending) or any filtering (search).

    If the number 2 sometimes refers to "Buy milk" and sometimes to "Pack
    passport" depending on the view, the tool becomes unreliable and dangerous.


2. The too Solution: A Dual ID System and the "Active List"

    too solves this problem by using two different identifiers and a strong
    philosophy about what the user sees by default.

        - ID (Internal): A permanent, stable, unique identifier (UUID). This
          is never shown to the user and is used internally to ensure logic
          always targets the correct item.

        - Position (External): A mutable, sequential integer (1, 2, 3...).
          This is the number the user sees and interacts with. With nested
          lists, it is always relative to its direct siblings (e.g., 1.1, 1.2).

    The core philosophy is this: the user-facing Position is for the "active
    list" only.

        - Active Todos: An "active" todo is any todo with the status pending.

        - Archived Todos: A done todo is considered "archived." It is hidden
          from the default view and does not affect the numbering of the
          active list.

        - Automatic Reordering: To keep the active list clean, too
          automatically re-numbers the Position of items after any command
          that changes the list's structure (complete, reopen, cleanup, move).

    This means the default too ls view is a curated, always-sequential list
    of what is currently relevant to the user.


3. Walkthrough: A Practical Example

    Here is a step-by-step example of how the system works in practice.


    3.1 Add initial items

        We start with an empty list.

            $ too add "Groceries"
            $ too add "Packing"

        Commentary: The active list is simple and sequential.

            $ too ls
            1. Groceries
            2. Packing


    3.2 Add nested items

        We add items under "Groceries".

            $ too add --parent 1 "Milk"
            $ too add --parent 1 "Bread"

        Commentary: Nested items are added. Their positions are relative to
        their parent.

            $ too ls
            1. Groceries
               1. Milk
               2. Bread
            2. Packing


    3.3 Complete an item

        We complete "Milk".

            $ too complete 1.1

        Commentary: "Milk" is marked as done and disappears from the active
        list. The system automatically reorders the remaining siblings, so
        "Bread" is instantly re-numbered from 1.2 to 1.1.

            $ too ls
            1. Groceries
               1. Bread
            2. Packing


    3.4 View all items (including archived)

        The --all flag reveals the underlying state of the data file.

            $ too ls --all
            1. Groceries (pending)
               1. Bread (pending)
               2. Milk (done)
            2. Packing (pending)

        Commentary: This view shows the "true" state. Note that "Milk" was
        re-numbered to 1.2 by the automatic reorder. Commands that need to
        reference archived items must use this view.


    3.5 Reopen an archived item

        Using the position from the --all view, we reopen "Milk".

            $ too reopen 1.2

        Commentary: It reappears in the active list, and another automatic
        reorder gives it the next available position, 1.2.

            $ too ls
            1. Groceries
               1. Bread
               2. Milk
            2. Packing


    3.6 Complete a parent item

        We complete the parent, "Groceries".

            $ too complete 1

        Commentary: Due to "Behavioral Propagation", the entire branch
        disappears from the active list. "Packing" is automatically
        re-numbered from 2 to 1.

            $ too ls
            1. Packing


    3.7 Clean up archived items

        The cleanup command permanently removes the "Groceries" item and all
        its descendants ("Bread", "Milk") because the parent was done.

            $ too cleanup

        Commentary: The remaining items are reordered, but "Packing" is
        already at position 1.

            $ too ls
            1. Packing

        This walkthrough demonstrates how the dual ID system and "active list"
        philosophy provide a user experience that is both intuitive for simple
        lists and powerful enough to handle complex, unambiguous operations.
